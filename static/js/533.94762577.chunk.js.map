{"version":3,"file":"static/js/533.94762577.chunk.js","mappings":"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","sources":["utils/isAvailableImage.js","Api.js","components/CastItem/CastItem.styled.jsx","components/CastItem/CastItem.jsx","components/CastGallery/CastGallery.styled.jsx","components/CastGallery/CastGallery.jsx","components/MovieCast/MovieCast.jsx"],"sourcesContent":["import defaultImage from 'images/no-image.gif';\n\nexport function isAvailableImage(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}","import axios from \"axios\";\nimport { isAvailableImage } from \"utils/isAvailableImage\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"bf90c64edd4fb3718c72a5077448d3a4\";\n\nexport async function fetchTrandingMovies () {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n  \n    const movies = response.data.results.map(({ id, title }) => {\n      return {\n        id,\n        title,\n      }\n    }\n  )\n\n  return { movies };\n};\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n\n  const { title, poster_path, overview, genres, vote_average, release_date } = response.data;\n\n  return {\n      title,\n      posterPath: isAvailableImage(poster_path),\n      overview,\n      genres: genres.map(genre => genre.name).join(', '),\n      vote: vote_average.toFixed(1)*10,\n      year: release_date.slice(0, 4),\n  };\n};\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n\n  const movieCast = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profile_path: isAvailableImage(profile_path),\n        character,\n      }\n    }\n  );\n\n  return movieCast;\n\n};\n\n\nexport async function fetchMovieReview(movieId) {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n\n  const movieReview = response.data.results.map(\n    ({ id, author, content }) => {\n      return {\n        id,\n        author,\n        content,\n      }\n    }\n  );\n\n  return movieReview;\n};\n\n\nexport async function fetchMoviesByQuery(query) {\n  const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`);\n  \n    const movies = response.data.results.map(({ id, title }) => {\n      return {\n        id,\n        title,\n      }\n    }\n  )\n\n  return { movies, totalResults: response.data.total_results };\n};","import styled from 'styled-components';\n\nexport const ItemCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style: none;\n  height: auto;\n  width: calc((100% - 20px) / 2);\n  border-radius: 10px;\n  background-color: #3B3B7C;\n  transition: color 250ms linear, background-color 250ms linear;\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 60px) / 4);\n  }\n  @media screen and (min-width: 1280px) {\n    width: calc((100% - 100px) / 6);\n  }\n\n  &:hover {\n    background-color: #4AB51A;\n    cursor: pointer;\n  }\n`;\nexport const ItemPhoto = styled.img`\n  width: 100%;\n  height: 250px;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const ItemInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n`;\n\nexport const ItemInfoText = styled.p`\n  margin: 0;\n  color: #ebebeb;\n  font-size: 16px;\n`;\n\nexport const ItemSpanText = styled.span`\n  font-weight: 700;\n`","import PropTypes from 'prop-types';\nimport {\n  ItemCard,\n  ItemPhoto,\n  ItemInfoText,\n  ItemInfoWrapper,\n  ItemSpanText,\n} from './CastItem.styled';\n\nfunction CastItem({ item: { name, profile_path, character } }) {\n  return (\n    <ItemCard>\n      <ItemPhoto src={profile_path} alt={name} title={name} />\n      <ItemInfoWrapper>\n        <ItemInfoText>\n          <ItemSpanText>Name:</ItemSpanText> {name}\n        </ItemInfoText>\n        <ItemInfoText>\n          <ItemSpanText>Character:</ItemSpanText> {character}\n        </ItemInfoText>\n      </ItemInfoWrapper>\n    </ItemCard>\n  );\n}\n\nCastItem.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profilePath: PropTypes.string,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CastItem;","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n  margin-top: 30px;\n  padding: 0;\n`;","import CastItem from \"components/CastItem\";\n\nimport { CastList } from \"./CastGallery.styled\";\n\nfunction CastGallery ({cast}) {\n    return (\n        <CastList>\n            {cast.map(item => (\n                <CastItem key={item.id} item={item} />\n            ))}\n        </CastList>\n    )\n}\n\nexport default CastGallery;","import { fetchMovieCast } from \"Api\";\nimport { useState, useEffect } from 'react';\nimport Loader from \"components/Loader\";\nimport { useParams } from \"react-router-dom\";\nimport CastGallery from \"components/CastGallery\";\n\nexport const MovieCast = () => {\n\n    const [movieCast, setMovieCast] = useState('');\n    const [status, setStatus] = useState('idle');\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n\n        if (!movieId) return;\n        \n        const getMovieCast = async () => {\n            setStatus('pending');\n            try {\n                const Cast = await fetchMovieCast(movieId);\n                setMovieCast(Cast);\n                setStatus('resolved');\n            }\n            catch (error) {\n                console.error(error);\n            }\n        }\n\n        getMovieCast(movieId);\n    }, [movieId]);\n        \n    return (\n        <>\n        {status === 'pending' && <Loader />}\n        {status === 'resolved' && <CastGallery cast={movieCast} />}\n        </>\n    )\n}\n\nexport default MovieCast;"],"names":["isAvailableImage","path","defaultImage","BASE_URL","API_KEY","fetchTrandingMovies","axios","response","movies","data","results","map","id","title","fetchMovieById","movieId","poster_path","overview","genres","vote_average","release_date","posterPath","genre","name","join","vote","toFixed","year","slice","fetchMovieCast","movieCast","cast","profile_path","character","fetchMovieReview","movieReview","author","content","fetchMoviesByQuery","query","totalResults","total_results","ItemCard","styled","ItemPhoto","ItemInfoWrapper","ItemInfoText","ItemSpanText","item","src","alt","CastList","useState","setMovieCast","status","setStatus","useParams","useEffect","getMovieCast","Cast","console","error","Loader"],"sourceRoot":""}